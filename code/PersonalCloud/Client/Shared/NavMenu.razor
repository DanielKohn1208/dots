@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
<nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Personal Cloud</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/files" Match="NavLinkMatch.All">
                        <span class="oi oi-file" aria-hidden="true"></span> Files
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="settings">
                        <span class="oi oi-spreadsheet" aria-hidden="true"></span> Settings
                    </NavLink>
                </li>
                @if(IsRoot)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="root">
                            <span class="oi oi-people" aria-hidden="true"></span> Root
                        </NavLink>
                    </li>
                }
                <li class="nav-item">
                    <button class="btn btn-outline-danger" @onclick="Logout">Logout</button>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    //might have to experiment with this at a later time
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    protected bool IsRoot{get; set;} = false;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState{get; set;}

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;        
        if(authState.User.IsInRole("root"))
        {
            IsRoot = true;
        }
    }
    
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        await _httpClient.GetAsync("/user/logoutuser");
        _navigationManager.NavigateTo("/",true);
        
    }
}